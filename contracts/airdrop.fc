#include "imports/stdlib.fc";
#include "imports/op-codes.fc";

global slice data::jetton_wallet;
global int data::merkle_root;
global cell data::helper_code;

global int context::op;
global slice context::sender;
global int context::query_id;

(slice, int) begin_parse_exotic(cell c) asm "XCTOS";


() load_Data(){
    slice cs = get_data().begin_parse();
    data::jetton_wallet = cs~load_msg_addr();
    data::merkle_root = cs~load_uint(256);
    data::helper_code = cs~load_ref();
}

() save_Data(){
    set_data(begin_cell()
         .store_slice(data::jetton_wallet)
         .store_uint(data::merkle_root,256)
         .store_ref(data::helper_code)
         .end_cell()
    );
}

(cell) helper_stateinit(int proof_hash , int index) impure inline {
      return begin_cell()
                       .store_uint(6,5)
                       .store_ref(data::helper_code)
                       .store_ref(
                        begin_cell()
                        .store_uint(0,1)
                        .store_slice(my_address())
                        .store_uint(proof_hash,256)
                        .store_uint(index,256)
                        .end_cell()
                       )
                       .end_cell();

}

(slice) helper_address(cell state_inti) impure inline {
    return begin_cell()
                       .store_uint(0x400, 11)
                       .store_uint(cell_hash(state_inti),256)
                       .end_cell()
                       .begin_parse();
}

() send_tokens(slice recipient , int amount) impure inline {
      send_raw_message(begin_cell()
                                  .store_uint(0x18,6)
                                  .store_slice(my_address())
                                   .store_coins(0)
                                   .store_uint(1,107)
                                   .store_ref(
                                    begin_cell()
                                    .store_uint(op::jetton::transfer, 32)
                                    .store_uint(context::query_id, 64)
                                    .store_coins(amount)
                                    .store_slice(recipient)
                                    .store_slice(recipient)
                                    .store_uint(0, 1)
                                    .store_coins(10000000)
                                    .store_uint(0, 1)
                                    .end_cell()
                                   ).end_cell()
                                   ,64);
}



() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if(in_msg_body.slice_bits() < 96){
        return ();
    }

    ;;slice cs = in_msg_full.begin_parse();
    
    context::op = in_msg_body~load_uint(32);
    context::query_id = in_msg_body~load_uint(64);

    ( _ , context::sender) = in_msg_full.begin_parse().skip_bits(4).load_msg_addr();

    load_Data();

    if(context::op == op::deploy){
        throw_unless(error::already_deployed, data::jetton_wallet.preload_uint(2) == 0);
        data::jetton_wallet = in_msg_body~load_msg_addr();
        save_Data();
    }
    elseif (context::op == op::process_claim){
     
        cell proof_cell = in_msg_body~load_ref();
        int index = in_msg_body~load_uint(256);

        var (cs , isexotic?) = proof_cell.begin_parse_exotic();

        throw_unless(42,isexotic?);
        throw_unless(43,cs~load_uint(8) == 3);
        throw_unless(44, cs~load_uint(256) == data::merkle_root);

        cell dict = in_msg_body~load_ref();
            (slice entry, int found?) = dict.udict_get?(256, index);

        throw_unless(45,found?);

        throw_unless(error::wrong_sender,equal_slices(context::sender, helper_address(helper_stateinit(proof_cell.cell_hash(), index))));

         send_tokens(entry~load_msg_addr(), entry~load_coins());
    }

    else {
        throw(0xffff);
    }
}

(slice, int, cell) get_contract_data() method_id {
    load_Data();
    return (data::jetton_wallet, data::merkle_root, data::helper_code);
}
